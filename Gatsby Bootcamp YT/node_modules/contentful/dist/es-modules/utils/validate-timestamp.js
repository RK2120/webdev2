"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = validateTimestamp;
exports.ValidationError = void 0;

class ValidationError extends Error {
  constructor(name, message) {
    super("Invalid \"".concat(name, "\" provided, ") + message);
    this.name = 'ValidationError';
  }

}

exports.ValidationError = ValidationError;

function validateTimestamp(name, timestamp, options) {
  options = options || {};

  if (typeof timestamp !== 'number') {
    throw new ValidationError(name, "only numeric values are allowed for timestamps, provided type was \"".concat(typeof timestamp, "\""));
  }

  if (options.maximum && timestamp > options.maximum) {
    throw new ValidationError(name, "value (".concat(timestamp, ") cannot be further in the future than expected maximum (").concat(options.maximum, ")"));
  }

  if (options.now && timestamp < options.now) {
    throw new ValidationError(name, "value (".concat(timestamp, ") cannot be in the past, current time was ").concat(options.now));
  }
}